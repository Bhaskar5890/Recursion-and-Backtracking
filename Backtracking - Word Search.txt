public class Solution {
    HashSet<(int,int)> set = new HashSet<(int,int)>();
    int rows = 0;
    int cols = 0;
    string currentWord = "";
    char[][] inputBoard = null;
    public bool Exist(char[][] board, string word) 
    {
        rows = board.Length;
        cols = board[0].Length;
        currentWord = word;
        inputBoard = board;
        for(int i = 0; i < rows; i++)
        {
            for(int j = 0; j < cols; j++)
            {
                if(DFS(i, j, 0))
                {
                    return true;
                }
            }
        }
        
        return false;
    }
    
    public bool DFS(int r, int c, int index)
    {
        if(index == currentWord.Length)
        {
            return true;
        }
        
        if(r < 0 || r >= rows || c < 0 || c >= cols || 
           inputBoard[r][c] != currentWord[index] || set.Contains((r,c)))
        {
            return false;
        }
        
        set.Add((r,c));
        
        var result = DFS(r+1, c, index+1) ||
            DFS(r, c+1, index+1) ||
            DFS(r-1, c, index+1) ||
            DFS(r, c-1, index+1);
            
        set.Remove((r,c));
        
        return result;
    }
}