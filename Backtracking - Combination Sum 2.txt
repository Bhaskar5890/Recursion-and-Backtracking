public class Solution {
    IList<IList<int>> res = new List<IList<int>>();
    public IList<IList<int>> CombinationSum2(int[] candidates, int target) 
    {
        var subList = new List<int>();
        Array.Sort(candidates);
        DFS(candidates, target, 0, subList);    
        return res;
    }
    
    public void DFS(int[] candidates, int target, int index, IList<int> subList)
    {
        if(target < 0)
        {
            return;
        }
        if(target == 0)
        {
            res.Add(new List<int>(subList));
            return;
        }
        
        for(int i = index; i < candidates.Length; i++)
        {
            if(i > index && candidates[i] == candidates[i-1]) 
            {
                continue;   
            }
            if(target < candidates[i])
            {
                break;
            }
            subList.Add(candidates[i]);
            DFS(candidates, target - candidates[i], i + 1, subList);
            subList.RemoveAt(subList.Count - 1);   
        }
    }
}