public class Solution {
    List<IList<int>> resList = new List<IList<int>>();
    public IList<IList<int>> CombinationSum(int[] candidates, int target) 
    {
        DFS(0, target, new List<int>(), candidates);
        return resList;
    }
    
    public void DFS(int index, int target, IList<int> current, int[] candidates)
    {
        if(target == 0)
        {
            resList.Add(new List<int>(current));
            return;
        }
        
        if(index == candidates.Length || target < 0)
        {
            return;
        }
        
        if(candidates[index] <= target)
        {
            current.Add(candidates[index]);
            DFS(index, target - candidates[index] , current, candidates);
            current.RemoveAt(current.Count() - 1);
        }
        
        DFS(index+1, target, current, candidates);    
    }
}